"""
Script para popular categorias padr√£o no banco de dados.
Executa apenas uma vez para criar as categorias b√°sicas do sistema.
"""
from app.database import SessionLocal
from app.models import Category, TransactionType, User
from sqlalchemy import select

# Categorias padr√£o do sistema
INCOME_CATEGORIES = [
    "Sal√°rio",
    "Freelance",
    "Investimentos",
    "B√¥nus",
    "Presente",
    "Venda",
    "Outros",
]

EXPENSE_CATEGORIES = [
    "Alimenta√ß√£o",
    "Transporte",
    "Moradia",
    "Sa√∫de",
    "Educa√ß√£o",
    "Lazer",
    "Compras",
    "Contas",
    "Vestu√°rio",
    "Outros",
]


def seed_categories():
    """Popula categorias padr√£o para todos os usu√°rios existentes"""
    db = SessionLocal()
    
    try:
        # Buscar todos os usu√°rios
        users = db.execute(select(User)).scalars().all()
        
        if not users:
            print("‚ö†Ô∏è  Nenhum usu√°rio encontrado no banco de dados")
            return
        
        print(f"üìä Encontrados {len(users)} usu√°rio(s)")
        
        categories_created = 0
        categories_skipped = 0
        
        for user in users:
            print(f"\nüë§ Processando usu√°rio: {user.username} (ID: {user.id})")
            
            # Adicionar categorias de receita
            for cat_name in INCOME_CATEGORIES:
                existing = db.query(Category).filter(
                    Category.user_id == user.id,
                    Category.name == cat_name,
                    Category.type == TransactionType.income
                ).first()
                
                if not existing:
                    category = Category(
                        user_id=user.id,
                        name=cat_name,
                        type=TransactionType.income,
                        is_default=True
                    )
                    db.add(category)
                    categories_created += 1
                    print(f"  ‚úÖ Criada: {cat_name} (Receita)")
                else:
                    categories_skipped += 1
                    print(f"  ‚è≠Ô∏è  J√° existe: {cat_name} (Receita)")
            
            # Adicionar categorias de despesa
            for cat_name in EXPENSE_CATEGORIES:
                existing = db.query(Category).filter(
                    Category.user_id == user.id,
                    Category.name == cat_name,
                    Category.type == TransactionType.expense
                ).first()
                
                if not existing:
                    category = Category(
                        user_id=user.id,
                        name=cat_name,
                        type=TransactionType.expense,
                        is_default=True
                    )
                    db.add(category)
                    categories_created += 1
                    print(f"  ‚úÖ Criada: {cat_name} (Despesa)")
                else:
                    categories_skipped += 1
                    print(f"  ‚è≠Ô∏è  J√° existe: {cat_name} (Despesa)")
        
        db.commit()
        
        print(f"\n{'='*60}")
        print(f"‚úÖ Seed conclu√≠do com sucesso!")
        print(f"üìä Categorias criadas: {categories_created}")
        print(f"‚è≠Ô∏è  Categorias j√° existentes: {categories_skipped}")
        print(f"{'='*60}\n")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao popular categorias: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    print("\nüå± Iniciando seed de categorias padr√£o...\n")
    seed_categories()





